/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/7f87085b-1513-498d-a847-43728279728e 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float humidity;
  float temperature;
  int light_level;
  int soil_moisture;
  bool pump_status;
  bool fan_status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <DHT.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_NeoPixel.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define LIGHT_SENSOR_PIN A0
#define SOIL_SENSOR_PIN A1
#define DHT_PIN 2
#define DHT_TYPE DHT11

#define NEOPIXEL_PIN 6
#define NUMPIXELS 1

#define PUMP_PIN 3
#define FAN_PIN 4

DHT dht(DHT_PIN, DHT_TYPE);
Adafruit_NeoPixel pixels(NUMPIXELS, NEOPIXEL_PIN, NEO_GRB + NEO_KHZ800);

void setup() {
  Serial.begin(9600);
  initProperties();

  pinMode(LIGHT_SENSOR_PIN, INPUT);
  pinMode(SOIL_SENSOR_PIN, INPUT);
  pinMode(PUMP_PIN, OUTPUT);
  pinMode(FAN_PIN, OUTPUT);

  dht.begin();
  pixels.begin();
  pixels.show(); // Initialize all pixels to 'off'
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.display();
  delay(2000);
  display.clearDisplay();
  
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  
  int lightLevel = analogRead(LIGHT_SENSOR_PIN);
  int soilMoisture = analogRead(SOIL_SENSOR_PIN);
  float temp = dht.readTemperature();
  float hum = dht.readHumidity();
  
  light_level = lightLevel;
  soil_moisture = soilMoisture;
  temperature = temp;
  humidity = hum;
  
  controlNeoPixel(lightLevel);
  controlPump(soilMoisture);
  controlFan(temp);
  
  displaySensorData(lightLevel, soilMoisture, temp, hum);
}

void controlNeoPixel(int lightLevel) {
  if (lightLevel < 500) {
    // Set to growth light spectrum: mostly red with some blue
    pixels.setPixelColor(0, pixels.Color(255, 0, 255)); // Purple (Red + Blue)
  } else {
    pixels.setPixelColor(0, pixels.Color(0, 0, 0)); // Turn off if light level is sufficient
  }
  pixels.show();
}

void controlPump(int soilMoisture) {
  if (soilMoisture < 300) {
    digitalWrite(PUMP_PIN, HIGH);
    pump_status = true;
  } else {
    digitalWrite(PUMP_PIN, LOW);
    pump_status = false;
  }
}

void controlFan(float temperature) {
  if (temperature > 25.0) {
    digitalWrite(FAN_PIN, HIGH);
    fan_status = true;
  } else {
    digitalWrite(FAN_PIN, LOW);
    fan_status = false;
  }
}

void displaySensorData(int light, int soil, float temp, float hum) {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  
  display.setCursor(0, 0);
  display.print("Light Level: ");
  display.print(light);
  
  display.setCursor(0, 10);
  display.print("Soil Moisture: ");
  display.print(soil);
  
  display.setCursor(0, 20);
  display.print("Temperature: ");
  display.print(temp);
  display.print(" C");
  
  display.setCursor(0, 30);
  display.print("Humidity: ");
  display.print(hum);
  display.print(" %");
  
  display.setCursor(0, 40);
  display.print("Pump: ");
  display.print(pump_status ? "On" : "Off");
  
  display.setCursor(0, 50);
  display.print("Fan: ");
  display.print(fan_status ? "On" : "Off");

  display.display();
}

void onLightLevelChange() {
  // handle change
}

void onSoilMoistureChange() {
  // handle change
}

void onTemperatureChange() {
  // handle change
}

void onHumidityChange() {
  // handle change
}
